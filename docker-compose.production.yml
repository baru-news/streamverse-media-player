version: '3.8'

services:
  telegram-bot:
    build:
      context: .
      dockerfile: telegram_userbot/Dockerfile
    container_name: telegram-userbot-prod
    restart: unless-stopped
    
    # Resource limits for production
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    
    # Environment configuration
    environment:
      - PYTHONPATH=/app
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - DOODSTREAM_API_KEY=${DOODSTREAM_API_KEY}
      - DOODSTREAM_PREMIUM_API_KEY=${DOODSTREAM_PREMIUM_API_KEY:-}
      - LULUSTREAM_API_KEY=${LULUSTREAM_API_KEY:-}
      - PRODUCTION=true
      - LOG_LEVEL=INFO
      - HEALTH_CHECK_INTERVAL=60
      - SECURITY_MONITORING=true
    
    # Volumes for persistent data
    volumes:
      - ./logs:/app/logs:rw
      - ./config:/app/config:ro
      - bot-sessions:/app/sessions:rw
      - bot-cache:/app/cache:rw
      - /etc/localtime:/etc/localtime:ro
    
    # Network configuration
    networks:
      - telegram-bot-network
    
    # Health check
    healthcheck:
      test: ["CMD", "python3", "/app/telegram_userbot/utils/health_check.py", "--quick"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    # Security settings
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    
    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"
        labels: "service=telegram-bot,environment=production"

  # Monitoring and metrics collection
  monitoring:
    build:
      context: .
      dockerfile: telegram_userbot/monitoring/Dockerfile
    container_name: telegram-monitoring-prod
    restart: unless-stopped
    
    depends_on:
      - telegram-bot
    
    environment:
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - MONITORING_INTERVAL=60
      - ALERT_WEBHOOK_URL=${ALERT_WEBHOOK_URL:-}
      - TELEGRAM_ADMIN_CHAT_ID=${TELEGRAM_ADMIN_CHAT_ID:-}
    
    volumes:
      - ./logs:/app/logs:rw
      - ./config:/app/config:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    
    networks:
      - telegram-bot-network
    
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M
    
    healthcheck:
      test: ["CMD", "python3", "/app/monitoring/health_check.py"]
      interval: 60s
      timeout: 15s
      retries: 2
    
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"
        labels: "service=monitoring,environment=production"

  # Security monitoring
  security-monitor:
    build:
      context: .
      dockerfile: telegram_userbot/security/Dockerfile
    container_name: telegram-security-prod
    restart: unless-stopped
    
    depends_on:
      - telegram-bot
    
    environment:
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - SECURITY_ENCRYPTION_KEY=${SECURITY_ENCRYPTION_KEY}
      - ALERT_WEBHOOK_URL=${ALERT_WEBHOOK_URL:-}
      - TELEGRAM_ADMIN_CHAT_ID=${TELEGRAM_ADMIN_CHAT_ID:-}
    
    volumes:
      - ./logs:/app/logs:rw
      - ./config:/app/config:rw
      - security-data:/app/security:rw
    
    networks:
      - telegram-bot-network
    
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 256M
        reservations:
          cpus: '0.05'
          memory: 64M
    
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"
        labels: "service=security,environment=production"

  # Backup service
  backup:
    build:
      context: .
      dockerfile: telegram_userbot/backup/Dockerfile
    container_name: telegram-backup-prod
    restart: unless-stopped
    
    environment:
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID:-}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY:-}
      - AWS_S3_BUCKET=${AWS_S3_BUCKET:-}
      - BACKUP_SCHEDULE=0 2 * * *  # Daily at 2 AM
      - BACKUP_RETENTION_DAYS=30
    
    volumes:
      - ./logs:/app/logs:rw
      - ./config:/app/config:ro
      - backup-storage:/app/backups:rw
      - bot-sessions:/app/sessions:ro
    
    networks:
      - telegram-bot-network
    
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M
    
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"
        labels: "service=backup,environment=production"

  # Reverse proxy with SSL termination
  nginx:
    image: nginx:1.21-alpine
    container_name: telegram-nginx-prod
    restart: unless-stopped
    
    ports:
      - "80:80"
      - "443:443"
    
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx:rw
    
    networks:
      - telegram-bot-network
    
    depends_on:
      - telegram-bot
    
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M
    
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3
    
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"
        labels: "service=nginx,environment=production"

# Named volumes for data persistence
volumes:
  bot-sessions:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/telegram-userbot/data/sessions
  
  bot-cache:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/telegram-userbot/data/cache
  
  security-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/telegram-userbot/data/security
  
  backup-storage:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/telegram-userbot/backups

# Networks
networks:
  telegram-bot-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
    driver_opts:
      com.docker.network.bridge.name: telegram-br0